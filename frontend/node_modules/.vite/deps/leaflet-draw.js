// src/components/FormularioContrato.jsx
import React, { useEffect, useMemo, useRef, useState } from "react";
import axios from "axios";
import InputMask from "react-input-mask";

const API_BASE = "http://127.0.0.1:8000/api/";
const CT_CONTRATO = "sepultados_gestao.concessaocontrato"; // ajuste se necessário

/* ========= Helpers: cemitério ativo ========= */
function getCemiterioAtivo() {
  try {
    const raw = localStorage.getItem("cemiterioAtivo");
    if (raw) {
      const o = JSON.parse(raw);
      if (o?.id) return { id: Number(o.id), nome: o.nome || "Cemitério" };
    }
  } catch {}
  const id = localStorage.getItem("cemiterioAtivoId");
  const nome = localStorage.getItem("cemiterioAtivoNome");
  if (id) return { id: Number(id), nome: nome || "Cemitério" };
  return null;
}

/* ========= Normalização de erros da API ========= */
function normalizeApiErrors(data) {
  const out = { summary: "", fields: {} };
  if (!data) return out;

  if (typeof data === "string") {
    if (data.includes("<!DOCTYPE") || data.includes("<html")) {
      out.summary = "Erro interno do servidor (500). Verifique os logs do backend.";
    } else {
      out.summary = data;
    }
    return out;
  }
  if (Array.isArray(data)) {
    out.summary = data.join(" ");
    return out;
  }
  const getMsgs = (val) => {
    if (Array.isArray(val)) {
      return val
        .map((v) => (typeof v === "object" && v?.message ? v.message : String(v)))
        .join(" ");
    }
    if (typeof val === "object" && val !== null) {
      const k = Object.keys(val)[0];
      return getMsgs(val[k]);
    }
    return String(val);
  };
  Object.entries(data).forEach(([k, v]) => {
    if (k === "detail" || k === "non_field_errors") out.summary = getMsgs(v);
    else out.fields[k] = getMsgs(v);
  });
  if (!out.summary) out.summary = "Revise os campos destacados em vermelho.";
  return out;
}
function focusFirstError(errorsObj, refs) {
  const firstKey = Object.keys(errorsObj)[0];
  const el = firstKey && refs?.current?.[firstKey];
  if (el && el.focus) {
    el.focus();
    el.scrollIntoView({ behavior: "smooth", block: "center" });
  }
}

/* ======= Mapeamento backend <-> UI (para carregar/enviar/erros) ======= */
const BACKEND_TO_UI_FIELD = {
  cpf: "documento",
  endereco_numero: "numero",
  endereco_bairro: "bairro",
  endereco_cidade: "cidade",
  endereco_estado: "estado",
  endereco_cep: "cep",
  valor_total: "valor",
};
function mapBackendErrorsToUI(fields) {
  const out = {};
  Object.entries(fields || {}).forEach(([k, v]) => {
    out[BACKEND_TO_UI_FIELD[k] || k] = v;
  });
  return out;
}

/* =============== Dropdown com busca (Túmulo) =============== */

// >>> helper igual ao do Sepultado (mostra identificador + linha + quadra)
function rotuloTumulo(t, quadrasMap = new Map()) {
  if (!t) return "";
  const id = t.id ?? t.pk ?? "";
  const base = t.identificador || t.codigo || t.nome || `T ${String(id).padStart(2, "0")}`;

  // linha
  let linhaTxt = "";
  const lraw =
    typeof t.linha === "object"
      ? t.linha?.id ?? t.linha?.numero ?? t.linha?.codigo
      : t.linha;
  if (t.usar_linha && (lraw || lraw === 0)) linhaTxt = `L ${lraw}`;

  // quadra
  let quadraTxt = "";
  const q = t.quadra;
  const resolveQuadra = (qInfo) => {
    if (!qInfo) return "";
    if (qInfo.nome) return qInfo.nome;
    if (qInfo.codigo != null) {
      const cod = String(qInfo.codigo);
      return /^\d+$/.test(cod) ? `Quadra ${cod.padStart(2, "0")}` : cod;
    }
    if (qInfo.id != null) return `Quadra ${qInfo.id}`;
    return "";
  };
  if (q) {
    if (typeof q === "object") {
      quadraTxt = resolveQuadra(q);
    } else {
      const info = quadrasMap.get(String(q)) || quadrasMap.get(Number(q));
      if (info) quadraTxt = resolveQuadra(info);
      else {
        const cod = String(q);
        quadraTxt = /^\d+$/.test(cod) ? `Quadra ${cod.padStart(2, "0")}` : cod;
      }
    }
  }

  return [base, linhaTxt, quadraTxt].filter(Boolean).join(" ");
}

function TumuloDropdown({ value, onChange, api, cemiterioId, error, inputRef }) {
  const [open, setOpen] = useState(false);
  const [q, setQ] = useState("");
  const [itens, setItens] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selecionado, setSelecionado] = useState(null); // ← label do item atual
  const [quadrasMap, setQuadrasMap] = useState(new Map());
  const wrapRef = useRef(null);

  async function carregar() {
    if (!cemiterioId) return;
    setLoading(true);
    try {
      // igual ao Sepultado: tumulos + quadras em paralelo
      const [tumulosRes, quadrasRes] = await Promise.all([
        api.get("tumulos/", { params: { cemiterio: cemiterioId } }),
        api.get("quadras/", { params: { cemiterio: cemiterioId } }),
      ]);

      const quadArr = Array.isArray(quadrasRes.data)
        ? quadrasRes.data
        : quadrasRes.data?.results ?? [];
      const qMap = new Map();
      quadArr.forEach((q) => {
        const qid = String(q.id ?? q.pk);
        qMap.set(qid, { id: q.id ?? q.pk, nome: q.nome, codigo: q.codigo });
      });
      setQuadrasMap(qMap);

      const tArr = Array.isArray(tumulosRes.data)
        ? tumulosRes.data
        : tumulosRes.data?.results ?? [];
      setItens(
        tArr.map((t) => ({
          id: t.id ?? t.pk,
          label: rotuloTumulo(t, qMap),
        }))
      );
    } catch {
      setItens([]);
    } finally {
      setLoading(false);
    }
  }

  // ao editar: se o id atual não estiver na lista, busca só ele p/ mostrar label
  async function carregarSelecionado() {
    if (!cemiterioId || !value) return;
    try {
      if (quadrasMap.size === 0) {
        const { data } = await api.get("quadras/", { params: { cemiterio: cemiterioId } });
        const quadArr = Array.isArray(data) ? data : data?.results ?? [];
        const qMap = new Map();
        quadArr.forEach((q) => {
          const qid = String(q.id ?? q.pk);
          qMap.set(qid, { id: q.id ?? q.pk, nome: q.nome, codigo: q.codigo });
        });
        setQuadrasMap(qMap);
      }
      const { data: t } = await api.get(`tumulos/${value}/`, {
        params: { cemiterio: cemiterioId },
      });
      setSelecionado({
        id: t.id ?? t.pk,
        label: rotuloTumulo(t, quadrasMap.size ? quadrasMap : new Map()),
      });
    } catch {
      setSelecionado(null);
    }
  }

  useEffect(() => {
    if (open) carregar();
  }, [open, cemiterioId]);

  useEffect(() => {
    function outside(e) {
      if (!wrapRef.current) return;
      if (!wrapRef.current.contains(e.target)) setOpen(false);
    }
    if (open) document.addEventListener("mousedown", outside);
    return () => document.removeEventListener("mousedown", outside);
  }, [open]);

  useEffect(() => {
    if (value && !open) carregarSelecionado();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value, cemiterioId]);

  const filtered = React.useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return itens;
    return itens.filter((o) => o.label.toLowerCase().includes(s));
  }, [itens, q]);

  const currentLabel =
    itens.find((o) => String(o.id) === String(value))?.label ||
    (selecionado && String(selecionado.id) === String(value)
      ? selecionado.label
      : "Selecione…");

  return (
    <div ref={wrapRef} className="relative">
      <button
        type="button"
        ref={inputRef}
        onClick={() => setOpen((v) => !v)}
        className={`w-full px-3 py-2 rounded-lg border ${
          error ? "border-red-400 ring-1 ring-red-500" : "border-[#bcd2a7]"
        } bg-white text-left ${error ? "" : "hover:bg-[#f7fbf2]"}`}
      >
        <span className="truncate">{currentLabel}</span>
        <span className="float-right">▾</span>
      </button>
      {error && <p className="mt-1 text-xs text-red-600">{error}</p>}

      {open && (
        <div className="absolute top-full left-0 mt-2 w-full bg-white rounded-xl shadow-2xl border border-[#e0efcf] z-50">
          <div className="p-2 border-b border-[#e6f2d9]">
            <input
              autoFocus
              value={q}
              onChange={(e) => setQ(e.target.value)}
              placeholder="Buscar túmulo…"
              className="w-full px-3 py-2 rounded-lg border border-[#bcd2a7] outline-none"
            />
          </div>
          <div className="max-h-64 overflow-auto">
            {loading ? (
              <div className="px-3 py-3 text-sm text-gray-600">Carregando…</div>
            ) : filtered.length === 0 ? (
              <div className="px-3 py-3 text-sm text-gray-600">Nenhum túmulo encontrado.</div>
            ) : (
              filtered.map((o) => (
                <div
                  key={o.id}
                  className="px-3 py-2 hover:bg-[#f8fcf2] cursor-pointer flex items-center justify-between"
                  onClick={() => {
                    onChange?.(o.id);
                    setSelecionado(o);
                    setOpen(false);
                  }}
                >
                  <span className="truncate">{o.label}</span>
                  {String(value) === String(o.id) && (
                    <span className="text-xs bg-[#224c15] text-white px-2 py-0.5 rounded">
                      Selecionado
                    </span>
                  )}
                </div>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  );
}


/* =================== Widget de Anexos (Genérico) =================== */
function AnexosWidget({ context, objectId, api, disabled }) {
  const [itens, setItens] = useState([]);
  const [arquivo, setArquivo] = useState(null);
  const [nome, setNome] = useState("");
  const [loading, setLoading] = useState(false);
  const [upLoading, setUpLoading] = useState(false);

  async function listar() {
    if (!context || !objectId) return;
    setLoading(true);
    try {
      const { data } = await api.get("anexos/", {
        params: { ct: context, object_id: objectId },
      });
      const arr = Array.isArray(data) ? data : data?.results ?? [];
      setItens(arr);
    } catch (e) {
      console.error("listar anexos", e?.response?.data || e);
      setItens([]);
    } finally {
      setLoading(false);
    }
  }
  useEffect(() => {
    listar();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [context, objectId]);

  async function enviar(e) {
    e.preventDefault();
    if (!arquivo) return;
    try {
      setUpLoading(true);
      const fd = new FormData();
      fd.append("arquivo", arquivo);
      if (nome) fd.append("nome", nome);
      fd.append("content_type", context);
      fd.append("object_id", String(objectId));
      await api.post("anexos/", fd);
      setArquivo(null);
      setNome("");
      await listar();
    } catch (e) {
      console.error("upload anexo", e?.response?.data || e);
      alert("Não foi possível enviar o anexo.");
    } finally {
      setUpLoading(false);
    }
  }
  async function excluir(id) {
    if (!window.confirm("Excluir este anexo?")) return;
    try {
      await api.delete(`anexos/${id}/`);
      await listar();
    } catch (e) {
      console.error("excluir anexo", e?.response?.data || e);
      alert("Erro ao excluir.");
    }
  }

  return (
    <div className="bg-[#f0f8ea] rounded-xl p-4 shadow space-y-4">
      <div className="text-green-900 font-semibold">Anexos</div>

      {/* Envio */}
      <form onSubmit={enviar} className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <div className="md:col-span-2">
          <input
            type="file"
            disabled={disabled}
            onChange={(e) => setArquivo(e.target.files?.[0] || null)}
            className={`w-full border rounded-lg px-3 py-2 bg-white ${
              disabled ? "border-gray-300 opacity-60" : "border-[#bcd2a7]"
            }`}
          />
          {disabled && (
            <p className="text-xs text-gray-600 mt-1">
              Salve o contrato para habilitar os anexos.
            </p>
          )}
        </div>
        <input
          placeholder="Descrição (opcional)"
          value={nome}
          onChange={(e) => setNome(e.target.value)}
          disabled={disabled}
          className={`w-full border rounded-lg px-3 py-2 bg-white ${
            disabled ? "border-gray-300 opacity-60" : "border-[#bcd2a7]"
          }`}
        />
        <div className="md:col-span-3 flex justify-end">
          <button
            type="submit"
            disabled={disabled || !arquivo || upLoading}
            className="px-4 py-2 rounded-lg bg-[#224c15] text-white hover:opacity-90 disabled:opacity-60"
          >
            {upLoading ? "Enviando…" : "Enviar anexo"}
          </button>
        </div>
      </form>

      {/* Lista */}
      {loading ? (
        <div className="text-gray-700">Carregando anexos…</div>
      ) : itens.length === 0 ? (
        <div className="text-gray-600">Nenhum anexo.</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full text-sm">
            <thead>
              <tr className="text-left text-green-900 bg-[#e6f3d7]">
                <th className="py-2 px-3 rounded-l-lg">Arquivo</th>
                <th className="py-2 px-3">Nome</th>
                <th className="py-2 px-3">Data de envio</th>
                <th className="py-2 px-3 rounded-r-lg w-32">Ações</th>
              </tr>
            </thead>
            <tbody className="bg-white/50">
              {itens.map((a) => (
                <tr key={a.id} className="border-t border-[#d8e9c0]">
                  <td className="py-2 px-3">
                    <a
                      href={a.arquivo_url || a.arquivo}
                      target="_blank"
                      rel="noreferrer"
                      className="underline text-blue-700"
                    >
                      baixar
                    </a>
                  </td>
                  <td className="py-2 px-3">{a.nome || "-"}</td>
                  <td className="py-2 px-3">
                    {a.data_upload ? new Date(a.data_upload).toLocaleString() : "-"}
                  </td>
                  <td className="py-2 px-3">
                    <button
                      onClick={() => excluir(a.id)}
                      className="px-3 py-1 rounded bg-[#e05151] text-white hover:opacity-90"
                    >
                      Excluir
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

/* ============================== Formulário =============================== */
export default function FormularioContrato({ contratoId, onCancel, onSuccess }) {
  const isEdit = !!contratoId;
  const token = localStorage.getItem("accessToken");
  const cemAtivo = getCemiterioAtivo();

  const api = useMemo(
    () =>
      axios.create({
        baseURL: API_BASE,
        headers: { Authorization: `Bearer ${token}` },
      }),
    [token]
  );

  const [carregando, setCarregando] = useState(isEdit);
  const [salvando, setSalvando] = useState(false);
  const [errors, setErrors] = useState({});
  const [errorSummary, setErrorSummary] = useState("");
  const fieldRefs = useRef({});

  const [form, setForm] = useState({
    numero_contrato: "",
    data_contrato: "",

    nome: "",
    documento: "",
    telefone: "",

    logradouro: "",
    numero: "",
    bairro: "",
    cidade: "",
    estado: "",
    cep: "",

    tumulo: "",
    observacoes: "",

    forma_pagamento: "gratuito", // gratuito | avista | parcelado
    quantidade_parcelas: "",
    valor: "",
  });

  // carregar edição
  useEffect(() => {
    async function fetchContrato() {
      if (!isEdit) return;
      try {
        setCarregando(true);
        const { data } = await api.get(`contratos/${contratoId}/`, {
          params: { cemiterio: cemAtivo?.id },
        });
        const v = (x) => (x === null || x === undefined ? "" : x);
        setForm((s) => ({
          ...s,
          numero_contrato: v(data.numero_contrato),
          data_contrato: v(data.data_contrato),

          // backend -> UI
          nome: v(data.nome),
          documento: v(data.cpf),
          telefone: v(data.telefone),

          logradouro: v(data.logradouro),
          numero: v(data.endereco_numero),
          bairro: v(data.endereco_bairro),
          cidade: v(data.endereco_cidade),
          estado: v(data.endereco_estado),
          cep: v(data.endereco_cep),

          tumulo: data.tumulo ?? "",
          observacoes: v(data.observacoes),

          forma_pagamento: v(data.forma_pagamento) || "gratuito",
          quantidade_parcelas: v(data.quantidade_parcelas),
          valor: data.valor_total ? String(data.valor_total).replace(".", ",") : "",
        }));
      } catch (e) {
        console.error("erro ao carregar contrato:", e?.response?.data || e);
        alert("Não foi possível carregar este contrato.");
        onCancel?.();
      } finally {
        setCarregando(false);
      }
    }
    fetchContrato();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [contratoId]);

  // dependências de UI
  useEffect(() => {
    if (form.forma_pagamento !== "parcelado" && form.quantidade_parcelas) {
      setForm((s) => ({ ...s, quantidade_parcelas: "" }));
    }
  }, [form.forma_pagamento]);

  const UFS = [
    "AC","AL","AM","AP","BA","CE","DF","ES","GO","MA",
    "MG","MS","MT","PA","PB","PE","PI","PR","RJ","RN",
    "RO","RR","RS","SC","SE","SP","TO",
  ];

  const setField = (name, value) => {
    setForm((s) => ({ ...s, [name]: value }));
    if (errors[name]) {
      setErrors((e) => {
        const copy = { ...e };
        delete copy[name];
        return copy;
      });
    }
  };

  const onChange = (e) => {
    const { name, value } = e.target;
    setField(name, value);
  };

  const onChangeValor = (e) => {
    let v = e.target.value || "";
    v = v.replace(/[^\d]/g, "");
    if (!v) return setField("valor", "");
    const int = v.slice(0, -2) || "0";
    const dec = v.slice(-2);
    const intFmt = int.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    setField("valor", `${intFmt},${dec}`);
  };

  const errMsg = (name) =>
    Array.isArray(errors?.[name]) ? errors[name].join(" ") : errors?.[name];

  // validação mínima do cliente (alinhada ao backend)
  function clientValidate(f) {
    const errs = {};
    if (!f.nome?.trim()) errs.nome = "Informe o nome do titular.";
    if (!f.documento?.trim()) errs.documento = "Informe o CPF/CNPJ.";
    if (!f.tumulo) errs.tumulo = "Selecione o túmulo.";
    if (f.forma_pagamento === "parcelado") {
      const qp = Number(f.quantidade_parcelas);
      if (!qp || qp < 1) errs.quantidade_parcelas = "Informe a quantidade de parcelas.";
    }
    if (f.forma_pagamento !== "gratuito") {
      const valorNumStr = (f.valor || "0").replace(/\./g, "").replace(",", ".");
      const valorNum = Number(valorNumStr);
      if (!valorNum || valorNum <= 0) errs.valor = "Informe o valor.";
    }
    return errs;
  }

  async function onSubmit(e) {
    e.preventDefault();
    setErrors({});
    setErrorSummary("");

    const errs = clientValidate(form);
    if (Object.keys(errs).length) {
      setErrors(errs);
      setErrorSummary("Revise os campos destacados em vermelho.");
      focusFirstError(errs, fieldRefs);
      return;
    }

    // UI -> backend (mapeando nomes)
    const payloadBackend = {
      nome: form.nome,
      cpf: form.documento,
      telefone: form.telefone,

      logradouro: form.logradouro,
      endereco_numero: form.numero,
      endereco_bairro: form.bairro,
      endereco_cidade: form.cidade,
      endereco_estado: form.estado,
      endereco_cep: form.cep,

      tumulo: form.tumulo,
      observacoes: form.observacoes,

      forma_pagamento: form.forma_pagamento,
      valor_total:
        form.forma_pagamento === "gratuito"
          ? "0"
          : (form.valor || "0").replace(/\./g, "").replace(",", "."),
      quantidade_parcelas:
        form.forma_pagamento === "parcelado" ? form.quantidade_parcelas : "",
    };

    const fd = new FormData();
    Object.entries(payloadBackend).forEach(([k, v]) => {
      if (v !== undefined && v !== null && v !== "") fd.append(k, v);
    });

    try {
      setSalvando(true);
      if (isEdit) {
        await api.put(`contratos/${contratoId}/`, fd, {
          params: { cemiterio: cemAtivo?.id },
        });
      } else {
        await api.post("contratos/", fd);
      }
      onSuccess?.();
    } catch (err) {
      const ct = err?.response?.headers?.["content-type"] || "";
      if (!ct.includes("application/json")) {
        setErrorSummary("Erro interno do servidor (500). Verifique os logs do backend.");
        return;
      }
      const data = err?.response?.data;
      const norm = normalizeApiErrors(data);
      const mapped = mapBackendErrorsToUI(norm.fields);
      setErrors(mapped);
      setErrorSummary(norm.summary);
      focusFirstError(mapped, fieldRefs);
    } finally {
      setSalvando(false);
    }
  }

  if (!cemAtivo?.id) {
    return <div className="text-sm text-red-600">Selecione um cemitério.</div>;
  }
  if (carregando) {
    return <div className="px-4 py-8 text-gray-700">Carregando dados do contrato…</div>;
  }

  const input = (label, name, props = {}, required = false) => {
    const error = errMsg(name);
    return (
      <div key={name}>
        <label className="block text-sm text-green-900 mb-1">
          {label}
          {required ? " *" : ""}
        </label>
        <input
          ref={(el) => (fieldRefs.current[name] = el)}
          name={name}
          value={form[name] || ""}
          onChange={onChange}
          className={`w-full border rounded-lg px-3 py-2 outline-none bg-white ${
            error ? "border-red-400 ring-1 ring-red-500" : "border-[#bcd2a7]"
          }`}
          {...props}
        />
        {error && <p className="mt-1 text-xs text-red-600">{error}</p>}
      </div>
    );
  };
  const displayReadOnly = (label, valueText) => (
    <div>
      <label className="block text-sm text-green-900 mb-1">{label}</label>
      <input
        value={valueText ?? "-"}
        readOnly
        disabled
        className="w-full border border-[#bcd2a7] rounded-lg px-3 py-2 bg-gray-100 text-gray-700"
      />
    </div>
  );
  const errBox = (msg) =>
    msg ? (
      <div className="bg-red-50 border border-red-300 text-red-800 rounded-lg px-4 py-2">
        {msg}
      </div>
    ) : null;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold text-green-900">
          {isEdit ? "Editar Contrato de Concessão" : "Cadastro de Contrato de Concessão"}
        </h2>
      </div>

      {errBox(errorSummary)}

      <form onSubmit={onSubmit}>
        <div className="bg-[#f0f8ea] rounded-xl p-6 shadow space-y-8">
          {/* IDENTIFICAÇÃO */}
          <div>
            <div className="text-green-900 font-semibold mb-2">Identificação</div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {displayReadOnly("Número do Contrato", form.numero_contrato || "-")}
              {displayReadOnly("Data do Contrato", form.data_contrato || "-")}
            </div>
          </div>

          {/* TITULAR */}
          <div>
            <div className="text-green-900 font-semibold mb-2">Dados do Titular</div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {input("Nome *", "nome", {}, true)}
              <div>
                <label className="block text-sm text-green-900 mb-1">Documento (CPF/CNPJ) *</label>
                <InputMask
                  mask={form.documento?.replace(/\D/g, "").length > 11 ? "99.999.999/9999-99" : "999.999.999-99"}
                  name="documento"
                  value={form.documento}
                  onChange={onChange}
                  inputRef={(el) => (fieldRefs.current["documento"] = el)}
                  className={`w-full border rounded-lg px-3 py-2 outline-none bg-white ${
                    errMsg("documento") ? "border-red-400 ring-1 ring-red-500" : "border-[#bcd2a7]"
                  }`}
                />
                {errMsg("documento") && (
                  <p className="mt-1 text-xs text-red-600">{errMsg("documento")}</p>
                )}
              </div>
              <div>
                <label className="block text-sm text-green-900 mb-1">Telefone</label>
                <InputMask
                  mask="(99) 99999-9999"
                  name="telefone"
                  value={form.telefone}
                  onChange={onChange}
                  inputRef={(el) => (fieldRefs.current["telefone"] = el)}
                  className={`w-full border rounded-lg px-3 py-2 outline-none bg-white ${
                    errMsg("telefone") ? "border-red-400 ring-1 ring-red-500" : "border-[#bcd2a7]"
                  }`}
                />
                {errMsg("telefone") && (
                  <p className="mt-1 text-xs text-red-600">{errMsg("telefone")}</p>
                )}
              </div>
            </div>
          </div>

          {/* ENDEREÇO DO TITULAR */}
          <div>
            <div className="text-green-900 font-semibold mb-2">Endereço do Titular</div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {input("Logradouro", "logradouro")}
              {input("Número", "numero")}
              {input("Bairro", "bairro")}
              {input("Cidade", "cidade")}
              <div>
                <label className="block text-sm text-green-900 mb-1">Estado (UF)</label>
                <select
                  ref={(el) => (fieldRefs.current["estado"] = el)}
                  name="estado"
                  value={form.estado}
                  onChange={onChange}
                  className={`w-full border rounded-lg px-3 py-2 bg-white ${
                    errMsg("estado") ? "border-red-400 ring-1 ring-red-500" : "border-[#bcd2a7]"
                  }`}
                >
                  <option value="">Selecione</option>
                  {UFS.map((uf) => (
                    <option key={uf} value={uf}>
                      {uf}
                    </option>
                  ))}
                </select>
                {errMsg("estado") && <p className="mt-1 text-xs text-red-600">{errMsg("estado")}</p>}
              </div>
              {input("CEP", "cep")}
            </div>
          </div>

          {/* TÚMULO */}
          <div>
            <div className="text-green-900 font-semibold mb-2">Túmulo</div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm text-green-900 mb-1">Túmulo *</label>
                <TumuloDropdown
                  value={form.tumulo}
                  onChange={(idSel) => setField("tumulo", idSel)}
                  api={api}
                  cemiterioId={cemAtivo?.id}
                  error={errMsg("tumulo")}
                  inputRef={(el) => (fieldRefs.current["tumulo"] = el)}
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm text-green-900 mb-1">Observações</label>
                <textarea
                  ref={(el) => (fieldRefs.current["observacoes"] = el)}
                  name="observacoes"
                  value={form.observacoes}
                  onChange={onChange}
                  rows={4}
                  className={`w-full border rounded-lg px-3 py-2 outline-none bg-white ${
                    errMsg("observacoes") ? "border-red-400 ring-1 ring-red-500" : "border-[#bcd2a7]"
                  }`}
                />
                {errMsg("observacoes") && (
                  <p className="mt-1 text-xs text-red-600">{errMsg("observacoes")}</p>
                )}
              </div>
            </div>
          </div>

          {/* PAGAMENTO */}
          <div>
            <div className="text-green-900 font-semibold mb-2">Pagamento</div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm text-green-900 mb-1">Forma de Pagamento</label>
                <select
                  ref={(el) => (fieldRefs.current["forma_pagamento"] = el)}
                  name="forma_pagamento"
                  value={form.forma_pagamento}
                  onChange={onChange}
                  className={`w-full border rounded-lg px-3 py-2 bg-white ${
                    errMsg("forma_pagamento") ? "border-red-400 ring-1 ring-red-500" : "border-[#bcd2a7]"
                  }`}
                >
                  <option value="gratuito">Gratuito</option>
                  <option value="avista">À Vista</option>
                  <option value="parcelado">Parcelado</option>
                </select>
                {errMsg("forma_pagamento") && (
                  <p className="mt-1 text-xs text-red-600">{errMsg("forma_pagamento")}</p>
                )}
              </div>

              {form.forma_pagamento === "parcelado" &&
                input("Quantidade de Parcelas", "quantidade_parcelas", { type: "number", min: 1 })}

              {form.forma_pagamento !== "gratuito" && (
                <div>
                  <label className="block text-sm text-green-900 mb-1">Valor (R$)</label>
                  <input
                    ref={(el) => (fieldRefs.current["valor"] = el)}
                    name="valor"
                    value={form.valor}
                    onChange={onChangeValor}
                    inputMode="numeric"
                    className={`w-full border rounded-lg px-3 py-2 outline-none bg-white ${
                      errMsg("valor") ? "border-red-400 ring-1 ring-red-500" : "border-[#bcd2a7]"
                    }`}
                    placeholder="0,00"
                  />
                  {errMsg("valor") && <p className="mt-1 text-xs text-red-600">{errMsg("valor")}</p>}
                </div>
              )}
            </div>
          </div>

          {/* AÇÕES */}
          <div className="flex justify-end gap-2 pt-2">
            <button
              type="button"
              onClick={() => onCancel?.()}
              className="px-4 py-2 rounded-lg border border-[#bcd2a7] text-green-900 hover:bg-[#f0f8ea]"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={salvando}
              className="px-4 py-2 rounded-lg bg-[#224c15] text-white hover:opacity-90 disabled:opacity-60"
            >
              {salvando ? "Salvando..." : "Salvar"}
            </button>
          </div>
        </div>
      </form>

      {/* ANEXOS */}
      <AnexosWidget
        context={CT_CONTRATO}
        objectId={isEdit ? contratoId : null}
        api={api}
        disabled={!isEdit}
      />
    </div>
  );
}                                                                 nMarkerClick, this), o2.on("contextmenu", this._onContextMenu, this), this._markers.push(o2);
    var n, s;
    for (t2 = 0, e2 = i2 - 1; t2 < i2; e2 = t2++) (0 !== t2 || L.Polygon && this._poly instanceof L.Polygon) && (n = this._markers[e2], s = this._markers[t2], this._createMiddleMarker(n, s), this._updatePrevNext(n, s));
  }, _createMarker: function(t2, e2) {
    var i2 = new L.Marker.Touch(t2, { draggable: true, icon: this.options.icon });
    return i2._origLatLng = t2, i2._index = e2, i2.on("dragstart", this._onMarkerDragStart, this).on("drag", this._onMarkerDrag, this).on("dragend", this._fireEdit, this).on("touchmove", this._onTouchMove, this).on("touchend", this._fireEdit, this).on("MSPointerMove", this._onTouchMove, this).on("MSPointerUp", this._fireEdit, this), this._markerGroup.addLayer(i2), i2;
  }, _onMarkerDragStart: function() {
    this._poly.fire("editstart");
  }, _spliceLatLngs: function() {
    var t2 = this._defaultShape(), e2 = [].splice.apply(t2, arguments);
    return this._poly._convertLatLngs(t2, true), this._poly.redraw(), e2;
  }, _removeMarker: function(t2) {
    var e2 = t2._index;
    this._markerGroup.removeLayer(t2), this._markers.splice(e2, 1), this._spliceLatLngs(e2, 1), this._updateIndexes(e2, -1), t2.off("dragstart", this._onMarkerDragStart, this).off("drag", this._onMarkerDrag, this).off("dragend", this._fireEdit, this).off("touchmove", this._onMarkerDrag, this).off("touchend", this._fireEdit, this).off("click", this._onMarkerClick, this).off("MSPointerMove", this._onTouchMove, this).off("MSPointerUp", this._fireEdit, this);
  }, _fireEdit: function() {
    this._poly.edited = true, this._poly.fire("edit"), this._poly._map.fire(L.Draw.Event.EDITVERTEX, { layers: this._markerGroup, poly: this._poly });
  }, _onMarkerDrag: function(t2) {
    var e2 = t2.target, i2 = this._poly, o2 = L.LatLngUtil.cloneLatLng(e2._origLatLng);
    if (L.extend(e2._origLatLng, e2._latlng), i2.options.poly) {
      var a = i2._map._editTooltip;
      if (!i2.options.poly.allowIntersection && i2.intersects()) {
        L.extend(e2._origLatLng, o2), e2.setLatLng(o2);
        var n = i2.options.color;
        i2.setStyle({ color: this.options.drawError.color }), a && a.updateContent({ text: L.drawLocal.draw.handlers.polyline.error }), setTimeout(function() {
          i2.setStyle({ color: n }), a && a.updateContent({ text: L.drawLocal.edit.handlers.edit.tooltip.text, subtext: L.drawLocal.edit.handlers.edit.tooltip.subtext });
        }, 1e3);
      }
    }
    e2._middleLeft && e2._middleLeft.setLatLng(this._getMiddleLatLng(e2._prev, e2)), e2._middleRight && e2._middleRight.setLatLng(this._getMiddleLatLng(e2, e2._next)), this._poly._bounds._southWest = L.latLng(1 / 0, 1 / 0), this._poly._bounds._northEast = L.latLng(-1 / 0, -1 / 0);
    var s = this._poly.getLatLngs();
    this._poly._convertLatLngs(s, true), this._poly.redraw(), this._poly.fire("editdrag");
  }, _onMarkerClick: function(t2) {
    var e2 = L.Polygon && this._poly instanceof L.Polygon ? 4 : 3, i2 = t2.target;
    this._defaultShape().length < e2 || (this._removeMarker(i2), this._updatePrevNext(i2._prev, i2._next), i2._middleLeft && this._markerGroup.removeLayer(i2._middleLeft), i2._middleRight && this._markerGroup.removeLayer(i2._middleRight), i2._prev && i2._next ? this._createMiddleMarker(i2._prev, i2._next) : i2._prev ? i2._next || (i2._prev._middleRight = null) : i2._next._middleLeft = null, this._fireEdit());
  }, _onContextMenu: function(t2) {
    var e2 = t2.target;
    this._poly;
    this._poly._map.fire(L.Draw.Event.MARKERCONTEXT, { marker: e2, layers: this._markerGroup, poly: this._poly }), L.DomEvent.stopPropagation;
  }, _onTouchMove: function(t2) {
    var e2 = this._map.mouseEventToLayerPoint(t2.originalEvent.touches[0]), i2 = this._map.layerPointToLatLng(e2), o2 = t2.target;
    L.extend(o2._origLatLng, i2), o2._middleLeft && o2._middleLeft.setLatLng(this._getMiddleLatLng(o2._prev, o2)), o2._middleRight && o2._middleRight.setLatLng(this._getMiddleLatLng(o2, o2._next)), this._poly.redraw(), this.updateMarkers();
  }, _updateIndexes: function(t2, e2) {
    this._markerGroup.eachLayer(function(i2) {
      i2._index > t2 && (i2._index += e2);
    });
  }, _createMiddleMarker: function(t2, e2) {
    var i2, o2, a, n = this._getMiddleLatLng(t2, e2), s = this._createMarker(n);
    s.setOpacity(0.6), t2._middleRight = e2._middleLeft = s, o2 = function() {
      s.off("touchmove", o2, this);
      var a2 = e2._index;
      s._index = a2, s.off("click", i2, this).on("click", this._onMarkerClick, this), n.lat = s.getLatLng().lat, n.lng = s.getLatLng().lng, this._spliceLatLngs(a2, 0, n), this._markers.splice(a2, 0, s), s.setOpacity(1), this._updateIndexes(a2, 1), e2._index++, this._updatePrevNext(t2, s), this._updatePrevNext(s, e2), this._poly.fire("editstart");
    }, a = function() {
      s.off("dragstart", o2, this), s.off("dragend", a, this), s.off("touchmove", o2, this), this._createMiddleMarker(t2, s), this._createMiddleMarker(s, e2);
    }, i2 = function() {
      o2.call(this), a.call(this), this._fireEdit();
    }, s.on("click", i2, this).on("dragstart", o2, this).on("dragend", a, this).on("touchmove", o2, this), this._markerGroup.addLayer(s);
  }, _updatePrevNext: function(t2, e2) {
    t2 && (t2._next = e2), e2 && (e2._prev = t2);
  }, _getMiddleLatLng: function(t2, e2) {
    var i2 = this._poly._map, o2 = i2.project(t2.getLatLng()), a = i2.project(e2.getLatLng());
    return i2.unproject(o2._add(a)._divideBy(2));
  } }), L.Polyline.addInitHook(function() {
    this.editing || (L.Edit.Poly && (this.editing = new L.Edit.Poly(this), this.options.editable && this.editing.enable()), this.on("add", function() {
      this.editing && this.editing.enabled() && this.editing.addHooks();
    }), this.on("remove", function() {
      this.editing && this.editing.enabled() && this.editing.removeHooks();
    }));
  }), L.Edit = L.Edit || {}, L.Edit.SimpleShape = L.Handler.extend({ options: { moveIcon: new L.DivIcon({ iconSize: new L.Point(8, 8), className: "leaflet-div-icon leaflet-editing-icon leaflet-edit-move" }), resizeIcon: new L.DivIcon({
    iconSize: new L.Point(8, 8),
    className: "leaflet-div-icon leaflet-editing-icon leaflet-edit-resize"
  }), touchMoveIcon: new L.DivIcon({ iconSize: new L.Point(20, 20), className: "leaflet-div-icon leaflet-editing-icon leaflet-edit-move leaflet-touch-icon" }), touchResizeIcon: new L.DivIcon({ iconSize: new L.Point(20, 20), className: "leaflet-div-icon leaflet-editing-icon leaflet-edit-resize leaflet-touch-icon" }) }, initialize: function(t2, e2) {
    L.Browser.touch && (this.options.moveIcon = this.options.touchMoveIcon, this.options.resizeIcon = this.options.touchResizeIcon), this._shape = t2, L.Util.setOptions(this, e2);
  }, addHooks: function() {
    var t2 = this._shape;
    this._shape._map && (this._map = this._shape._map, t2.setStyle(t2.options.editing), t2._map && (this._map = t2._map, this._markerGroup || this._initMarkers(), this._map.addLayer(this._markerGroup)));
  }, removeHooks: function() {
    var t2 = this._shape;
    if (t2.setStyle(t2.options.original), t2._map) {
      this._unbindMarker(this._moveMarker);
      for (var e2 = 0, i2 = this._resizeMarkers.length; e2 < i2; e2++) this._unbindMarker(this._resizeMarkers[e2]);
      this._resizeMarkers = null, this._map.removeLayer(this._markerGroup), delete this._markerGroup;
    }
    this._map = null;
  }, updateMarkers: function() {
    this._markerGroup.clearLayers(), this._initMarkers();
  }, _initMarkers: function() {
    this._markerGroup || (this._markerGroup = new L.LayerGroup()), this._createMoveMarker(), this._createResizeMarker();
  }, _createMoveMarker: function() {
  }, _createResizeMarker: function() {
  }, _createMarker: function(t2, e2) {
    var i2 = new L.Marker.Touch(t2, { draggable: true, icon: e2, zIndexOffset: 10 });
    return this._bindMarker(i2), this._markerGroup.addLayer(i2), i2;
  }, _bindMarker: function(t2) {
    t2.on("dragstart", this._onMarkerDragStart, this).on("drag", this._onMarkerDrag, this).on("dragend", this._onMarkerDragEnd, this).on("touchstart", this._onTouchStart, this).on("touchmove", this._onTouchMove, this).on("MSPointerMove", this._onTouchMove, this).on("touchend", this._onTouchEnd, this).on("MSPointerUp", this._onTouchEnd, this);
  }, _unbindMarker: function(t2) {
    t2.off("dragstart", this._onMarkerDragStart, this).off("drag", this._onMarkerDrag, this).off("dragend", this._onMarkerDragEnd, this).off("touchstart", this._onTouchStart, this).off("touchmove", this._onTouchMove, this).off("MSPointerMove", this._onTouchMove, this).off("touchend", this._onTouchEnd, this).off("MSPointerUp", this._onTouchEnd, this);
  }, _onMarkerDragStart: function(t2) {
    t2.target.setOpacity(0), this._shape.fire("editstart");
  }, _fireEdit: function() {
    this._shape.edited = true, this._shape.fire("edit");
  }, _onMarkerDrag: function(t2) {
    var e2 = t2.target, i2 = e2.getLatLng();
    e2 === this._moveMarker ? this._move(i2) : this._resize(i2), this._shape.redraw(), this._shape.fire("editdrag");
  }, _onMarkerDragEnd: function(t2) {
    t2.target.setOpacity(1), this._fireEdit();
  }, _onTouchStart: function(t2) {
    if (L.Edit.SimpleShape.prototype._onMarkerDragStart.call(this, t2), "function" == typeof this._getCorners) {
      var e2 = this._getCorners(), i2 = t2.target, o2 = i2._cornerIndex;
      i2.setOpacity(0), this._oppositeCorner = e2[(o2 + 2) % 4], this._toggleCornerMarkers(0, o2);
    }
    this._shape.fire("editstart");
  }, _onTouchMove: function(t2) {
    var e2 = this._map.mouseEventToLayerPoint(t2.originalEvent.touches[0]), i2 = this._map.layerPointToLatLng(e2);
    return t2.target === this._moveMarker ? this._move(i2) : this._resize(i2), this._shape.redraw(), false;
  }, _onTouchEnd: function(t2) {
    t2.target.setOpacity(1), this.updateMarkers(), this._fireEdit();
  }, _move: function() {
  }, _resize: function() {
  } }), L.Edit = L.Edit || {}, L.Edit.Rectangle = L.Edit.SimpleShape.extend({ _createMoveMarker: function() {
    var t2 = this._shape.getBounds(), e2 = t2.getCenter();
    this._moveMarker = this._createMarker(e2, this.options.moveIcon);
  }, _createResizeMarker: function() {
    var t2 = this._getCorners();
    this._resizeMarkers = [];
    for (var e2 = 0, i2 = t2.length; e2 < i2; e2++) this._resizeMarkers.push(this._createMarker(t2[e2], this.options.resizeIcon)), this._resizeMarkers[e2]._cornerIndex = e2;
  }, _onMarkerDragStart: function(t2) {
    L.Edit.SimpleShape.prototype._onMarkerDragStart.call(this, t2);
    var e2 = this._getCorners(), i2 = t2.target, o2 = i2._cornerIndex;
    this._oppositeCorner = e2[(o2 + 2) % 4], this._toggleCornerMarkers(0, o2);
  }, _onMarkerDragEnd: function(t2) {
    var e2, i2, o2 = t2.target;
    o2 === this._moveMarker && (e2 = this._shape.getBounds(), i2 = e2.getCenter(), o2.setLatLng(i2)), this._toggleCornerMarkers(1), this._repositionCornerMarkers(), L.Edit.SimpleShape.prototype._onMarkerDragEnd.call(this, t2);
  }, _move: function(t2) {
    for (var e2, i2 = this._shape._defaultShape ? this._shape._defaultShape() : this._shape.getLatLngs(), o2 = this._shape.getBounds(), a = o2.getCenter(), n = [], s = 0, r = i2.length; s < r; s++) e2 = [i2[s].lat - a.lat, i2[s].lng - a.lng], n.push([t2.lat + e2[0], t2.lng + e2[1]]);
    this._shape.setLatLngs(n), this._repositionCornerMarkers(), this._map.fire(L.Draw.Event.EDITMOVE, { layer: this._shape });
  }, _resize: function(t2) {
    var e2;
    this._shape.setBounds(L.latLngBounds(t2, this._oppositeCorner)), e2 = this._shape.getBounds(), this._moveMarker.setLatLng(e2.getCenter()), this._map.fire(L.Draw.Event.EDITRESIZE, { layer: this._shape });
  }, _getCorners: function() {
    var t2 = this._shape.getBounds();
    return [t2.getNorthWest(), t2.getNorthEast(), t2.getSouthEast(), t2.getSouthWest()];
  }, _toggleCornerMarkers: function(t2) {
    for (var e2 = 0, i2 = this._resizeMarkers.length; e2 < i2; e2++) this._resizeMarkers[e2].setOpacity(t2);
  }, _repositionCornerMarkers: function() {
    for (var t2 = this._getCorners(), e2 = 0, i2 = this._resizeMarkers.length; e2 < i2; e2++) this._resizeMarkers[e2].setLatLng(t2[e2]);
  } }), L.Rectangle.addInitHook(function() {
    L.Edit.Rectangle && (this.editing = new L.Edit.Rectangle(this), this.options.editable && this.editing.enable());
  }), L.Edit = L.Edit || {}, L.Edit.CircleMarker = L.Edit.SimpleShape.extend({ _createMoveMarker: function() {
    var t2 = this._shape.getLatLng();
    this._moveMarker = this._createMarker(t2, this.options.moveIcon);
  }, _createResizeMarker: function() {
    this._resizeMarkers = [];
  }, _move: function(t2) {
    if (this._resizeMarkers.length) {
      var e2 = this._getResizeMarkerPoint(t2);
      this._resizeMarkers[0].setLatLng(e2);
    }
    this._shape.setLatLng(t2), this._map.fire(L.Draw.Event.EDITMOVE, { layer: this._shape });
  } }), L.CircleMarker.addInitHook(function() {
    L.Edit.CircleMarker && (this.editing = new L.Edit.CircleMarker(this), this.options.editable && this.editing.enable()), this.on("add", function() {
      this.editing && this.editing.enabled() && this.editing.addHooks();
    }), this.on("remove", function() {
      this.editing && this.editing.enabled() && this.editing.removeHooks();
    });
  }), L.Edit = L.Edit || {}, L.Edit.Circle = L.Edit.CircleMarker.extend({ _createResizeMarker: function() {
    var t2 = this._shape.getLatLng(), e2 = this._getResizeMarkerPoint(t2);
    this._resizeMarkers = [], this._resizeMarkers.push(this._createMarker(e2, this.options.resizeIcon));
  }, _getResizeMarkerPoint: function(t2) {
    var e2 = this._shape._radius * Math.cos(Math.PI / 4), i2 = this._map.project(t2);
    return this._map.unproject([i2.x + e2, i2.y - e2]);
  }, _resize: function(t2) {
    var e2 = this._moveMarker.getLatLng();
    L.GeometryUtil.isVersion07x() ? radius = e2.distanceTo(t2) : radius = this._map.distance(e2, t2), this._shape.setRadius(radius), this._map.editTooltip && this._map._editTooltip.updateContent({ text: L.drawLocal.edit.handlers.edit.tooltip.subtext + "<br />" + L.drawLocal.edit.handlers.edit.tooltip.text, subtext: L.drawLocal.draw.handlers.circle.radius + ": " + L.GeometryUtil.readableDistance(radius, true, this.options.feet, this.options.nautic) }), this._shape.setRadius(radius), this._map.fire(L.Draw.Event.EDITRESIZE, { layer: this._shape });
  } }), L.Circle.addInitHook(function() {
    L.Edit.Circle && (this.editing = new L.Edit.Circle(this), this.options.editable && this.editing.enable());
  }), L.Map.mergeOptions({ touchExtend: true }), L.Map.TouchExtend = L.Handler.extend({ initialize: function(t2) {
    this._map = t2, this._container = t2._container, this._pane = t2._panes.overlayPane;
  }, addHooks: function() {
    L.DomEvent.on(this._container, "touchstart", this._onTouchStart, this), L.DomEvent.on(this._container, "touchend", this._onTouchEnd, this), L.DomEvent.on(this._container, "touchmove", this._onTouchMove, this), this._detectIE() ? (L.DomEvent.on(this._container, "MSPointerDown", this._onTouchStart, this), L.DomEvent.on(this._container, "MSPointerUp", this._onTouchEnd, this), L.DomEvent.on(this._container, "MSPointerMove", this._onTouchMove, this), L.DomEvent.on(this._container, "MSPointerCancel", this._onTouchCancel, this)) : (L.DomEvent.on(this._container, "touchcancel", this._onTouchCancel, this), L.DomEvent.on(this._container, "touchleave", this._onTouchLeave, this));
  }, removeHooks: function() {
    L.DomEvent.off(this._container, "touchstart", this._onTouchStart, this), L.DomEvent.off(this._container, "touchend", this._onTouchEnd, this), L.DomEvent.off(this._container, "touchmove", this._onTouchMove, this), this._detectIE() ? (L.DomEvent.off(this._container, "MSPointerDown", this._onTouchStart, this), L.DomEvent.off(this._container, "MSPointerUp", this._onTouchEnd, this), L.DomEvent.off(this._container, "MSPointerMove", this._onTouchMove, this), L.DomEvent.off(this._container, "MSPointerCancel", this._onTouchCancel, this)) : (L.DomEvent.off(this._container, "touchcancel", this._onTouchCancel, this), L.DomEvent.off(this._container, "touchleave", this._onTouchLeave, this));
  }, _touchEvent: function(t2, e2) {
    var i2 = {};
    if (void 0 !== t2.touches) {
      if (!t2.touches.length) return;
      i2 = t2.touches[0];
    } else {
      if ("touch" !== t2.pointerType) return;
      if (i2 = t2, !this._filterClick(t2)) return;
    }
    var o2 = this._map.mouseEventToContainerPoint(i2), a = this._map.mouseEventToLayerPoint(i2), n = this._map.layerPointToLatLng(a);
    this._map.fire(e2, { latlng: n, layerPoint: a, containerPoint: o2, pageX: i2.pageX, pageY: i2.pageY, originalEvent: t2 });
  }, _filterClick: function(t2) {
    var e2 = t2.timeStamp || t2.originalEvent.timeStamp, i2 = L.DomEvent._lastClick && e2 - L.DomEvent._lastClick;
    return i2 && i2 > 100 && i2 < 500 || t2.target._simulatedClick && !t2._simulated ? (L.DomEvent.stop(t2), false) : (L.DomEvent._lastClick = e2, true);
  }, _onTouchStart: function(t2) {
    if (this._map._loaded) {
      this._touchEvent(t2, "touchstart");
    }
  }, _onTouchEnd: function(t2) {
    if (this._map._loaded) {
      this._touchEvent(t2, "touchend");
    }
  }, _onTouchCancel: function(t2) {
    if (this._map._loaded) {
      var e2 = "touchcancel";
      this._detectIE() && (e2 = "pointercancel"), this._touchEvent(t2, e2);
    }
  }, _onTouchLeave: function(t2) {
    if (this._map._loaded) {
      this._touchEvent(t2, "touchleave");
    }
  }, _onTouchMove: function(t2) {
    if (this._map._loaded) {
      this._touchEvent(t2, "touchmove");
    }
  }, _detectIE: function() {
    var e2 = t.navigator.userAgent, i2 = e2.indexOf("MSIE ");
    if (i2 > 0) return parseInt(e2.substring(i2 + 5, e2.indexOf(".", i2)), 10);
    if (e2.indexOf("Trident/") > 0) {
      var o2 = e2.indexOf("rv:");
      return parseInt(e2.substring(o2 + 3, e2.indexOf(".", o2)), 10);
    }
    var a = e2.indexOf("Edge/");
    return a > 0 && parseInt(e2.substring(a + 5, e2.indexOf(".", a)), 10);
  } }), L.Map.addInitHook("addHandler", "touchExtend", L.Map.TouchExtend), L.Marker.Touch = L.Marker.extend({ _initInteraction: function() {
    return this.addInteractiveTarget ? L.Marker.prototype._initInteraction.apply(this) : this._initInteractionLegacy();
  }, _initInteractionLegacy: function() {
    if (this.options.clickable) {
      var t2 = this._icon, e2 = ["dblclick", "mousedown", "mouseover", "mouseout", "contextmenu", "touchstart", "touchend", "touchmove"];
      this._detectIE ? e2.concat(["MSPointerDown", "MSPointerUp", "MSPointerMove", "MSPointerCancel"]) : e2.concat(["touchcancel"]), L.DomUtil.addClass(t2, "leaflet-clickable"), L.DomEvent.on(t2, "click", this._onMouseClick, this), L.DomEvent.on(t2, "keypress", this._onKeyPress, this);
      for (var i2 = 0; i2 < e2.length; i2++) L.DomEvent.on(t2, e2[i2], this._fireMouseEvent, this);
      L.Handler.MarkerDrag && (this.dragging = new L.Handler.MarkerDrag(this), this.options.draggable && this.dragging.enable());
    }
  }, _detectIE: function() {
    var e2 = t.navigator.userAgent, i2 = e2.indexOf("MSIE ");
    if (i2 > 0) return parseInt(e2.substring(i2 + 5, e2.indexOf(".", i2)), 10);
    if (e2.indexOf("Trident/") > 0) {
      var o2 = e2.indexOf("rv:");
      return parseInt(e2.substring(o2 + 3, e2.indexOf(".", o2)), 10);
    }
    var a = e2.indexOf("Edge/");
    return a > 0 && parseInt(e2.substring(a + 5, e2.indexOf(".", a)), 10);
  } }), L.LatLngUtil = { cloneLatLngs: function(t2) {
    for (var e2 = [], i2 = 0, o2 = t2.length; i2 < o2; i2++) Array.isArray(t2[i2]) ? e2.push(L.LatLngUtil.cloneLatLngs(t2[i2])) : e2.push(this.cloneLatLng(t2[i2]));
    return e2;
  }, cloneLatLng: function(t2) {
    return L.latLng(t2.lat, t2.lng);
  } }, function() {
    var t2 = { km: 2, ha: 2, m: 0, mi: 2, ac: 2, yd: 0, ft: 0, nm: 2 };
    L.GeometryUtil = L.extend(L.GeometryUtil || {}, { geodesicArea: function(t3) {
      var e2, i2, o2 = t3.length, a = 0, n = Math.PI / 180;
      if (o2 > 2) {
        for (var s = 0; s < o2; s++) e2 = t3[s], i2 = t3[(s + 1) % o2], a += (i2.lng - e2.lng) * n * (2 + Math.sin(e2.lat * n) + Math.sin(i2.lat * n));
        a = 6378137 * a * 6378137 / 2;
      }
      return Math.abs(a);
    }, formattedNumber: function(t3, e2) {
      var i2 = parseFloat(t3).toFixed(e2), o2 = L.drawLocal.format && L.drawLocal.format.numeric, a = o2 && o2.delimiters, n = a && a.thousands, s = a && a.decimal;
      if (n || s) {
        var r = i2.split(".");
        i2 = n ? r[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + n) : r[0], s = s || ".", r.length > 1 && (i2 = i2 + s + r[1]);
      }
      return i2;
    }, readableArea: function(e2, i2, o2) {
      var a, n, o2 = L.Util.extend({}, t2, o2);
      return i2 ? (n = ["ha", "m"], type = typeof i2, "string" === type ? n = [i2] : "boolean" !== type && (n = i2), a = e2 >= 1e6 && -1 !== n.indexOf("km") ? L.GeometryUtil.formattedNumber(1e-6 * e2, o2.km) + " km²" : e2 >= 1e4 && -1 !== n.indexOf("ha") ? L.GeometryUtil.formattedNumber(1e-4 * e2, o2.ha) + " ha" : L.GeometryUtil.formattedNumber(e2, o2.m) + " m²") : (e2 /= 0.836127, a = e2 >= 3097600 ? L.GeometryUtil.formattedNumber(e2 / 3097600, o2.mi) + " mi²" : e2 >= 4840 ? L.GeometryUtil.formattedNumber(e2 / 4840, o2.ac) + " acres" : L.GeometryUtil.formattedNumber(e2, o2.yd) + " yd²"), a;
    }, readableDistance: function(e2, i2, o2, a, n) {
      var s, n = L.Util.extend({}, t2, n);
      switch (i2 ? "string" == typeof i2 ? i2 : "metric" : o2 ? "feet" : a ? "nauticalMile" : "yards") {
        case "metric":
          s = e2 > 1e3 ? L.GeometryUtil.formattedNumber(e2 / 1e3, n.km) + " km" : L.GeometryUtil.formattedNumber(e2, n.m) + " m";
          break;
        case "feet":
          e2 *= 3.28083, s = L.GeometryUtil.formattedNumber(e2, n.ft) + " ft";
          break;
        case "nauticalMile":
          e2 *= 0.53996, s = L.GeometryUtil.formattedNumber(e2 / 1e3, n.nm) + " nm";
          break;
        case "yards":
        default:
          e2 *= 1.09361, s = e2 > 1760 ? L.GeometryUtil.formattedNumber(e2 / 1760, n.mi) + " miles" : L.GeometryUtil.formattedNumber(e2, n.yd) + " yd";
      }
      return s;
    }, isVersion07x: function() {
      var t3 = L.version.split(".");
      return 0 === parseInt(t3[0], 10) && 7 === parseInt(t3[1], 10);
    } });
  }(), L.Util.extend(L.LineUtil, { segmentsIntersect: function(t2, e2, i2, o2) {
    return this._checkCounterclockwise(t2, i2, o2) !== this._checkCounterclockwise(e2, i2, o2) && this._checkCounterclockwise(t2, e2, i2) !== this._checkCounterclockwise(t2, e2, o2);
  }, _checkCounterclockwise: function(t2, e2, i2) {
    return (i2.y - t2.y) * (e2.x - t2.x) > (e2.y - t2.y) * (i2.x - t2.x);
  } }), L.Polyline.include({ intersects: function() {
    var t2, e2, i2, o2 = this._getProjectedPoints(), a = o2 ? o2.length : 0;
    if (this._tooFewPointsForIntersection()) return false;
    for (t2 = a - 1; t2 >= 3; t2--) if (e2 = o2[t2 - 1], i2 = o2[t2], this._lineSegmentsIntersectsRange(e2, i2, t2 - 2)) return true;
    return false;
  }, newLatLngIntersects: function(t2, e2) {
    return !!this._map && this.newPointIntersects(this._map.latLngToLayerPoint(t2), e2);
  }, newPointIntersects: function(t2, e2) {
    var i2 = this._getProjectedPoints(), o2 = i2 ? i2.length : 0, a = i2 ? i2[o2 - 1] : null, n = o2 - 2;
    return !this._tooFewPointsForIntersection(1) && this._lineSegmentsIntersectsRange(a, t2, n, e2 ? 1 : 0);
  }, _tooFewPointsForIntersection: function(t2) {
    var e2 = this._getProjectedPoints(), i2 = e2 ? e2.length : 0;
    return i2 += t2 || 0, !e2 || i2 <= 3;
  }, _lineSegmentsIntersectsRange: function(t2, e2, i2, o2) {
    var a, n, s = this._getProjectedPoints();
    o2 = o2 || 0;
    for (var r = i2; r > o2; r--) if (a = s[r - 1], n = s[r], L.LineUtil.segmentsIntersect(t2, e2, a, n)) return true;
    return false;
  }, _getProjectedPoints: function() {
    if (!this._defaultShape) return this._originalPoints;
    for (var t2 = [], e2 = this._defaultShape(), i2 = 0; i2 < e2.length; i2++) t2.push(this._map.latLngToLayerPoint(e2[i2]));
    return t2;
  } }), L.Polygon.include({ intersects: function() {
    var t2, e2, i2, o2, a = this._getProjectedPoints();
    return !this._tooFewPointsForIntersection() && (!!L.Polyline.prototype.intersects.call(this) || (t2 = a.length, e2 = a[0], i2 = a[t2 - 1], o2 = t2 - 2, this._lineSegmentsIntersectsRange(i2, e2, o2, 1)));
  } }), L.Control.Draw = L.Control.extend({ options: { position: "topleft", draw: {}, edit: false }, initialize: function(t2) {
    if (L.version < "0.7") throw new Error("Leaflet.draw 0.2.3+ requires Leaflet 0.7.0+. Download latest from https://github.com/Leaflet/Leaflet/");
    L.Control.prototype.initialize.call(this, t2);
    var e2;
    this._toolbars = {}, L.DrawToolbar && this.options.draw && (e2 = new L.DrawToolbar(this.options.draw), this._toolbars[L.DrawToolbar.TYPE] = e2, this._toolbars[L.DrawToolbar.TYPE].on("enable", this._toolbarEnabled, this)), L.EditToolbar && this.options.edit && (e2 = new L.EditToolbar(this.options.edit), this._toolbars[L.EditToolbar.TYPE] = e2, this._toolbars[L.EditToolbar.TYPE].on("enable", this._toolbarEnabled, this)), L.toolbar = this;
  }, onAdd: function(t2) {
    var e2, i2 = L.DomUtil.create("div", "leaflet-draw"), o2 = false;
    for (var a in this._toolbars) this._toolbars.hasOwnProperty(a) && (e2 = this._toolbars[a].addToolbar(t2)) && (o2 || (L.DomUtil.hasClass(e2, "leaflet-draw-toolbar-top") || L.DomUtil.addClass(e2.childNodes[0], "leaflet-draw-toolbar-top"), o2 = true), i2.appendChild(e2));
    return i2;
  }, onRemove: function() {
    for (var t2 in this._toolbars) this._toolbars.hasOwnProperty(t2) && this._toolbars[t2].removeToolbar();
  }, setDrawingOptions: function(t2) {
    for (var e2 in this._toolbars) this._toolbars[e2] instanceof L.DrawToolbar && this._toolbars[e2].setOptions(t2);
  }, _toolbarEnabled: function(t2) {
    var e2 = t2.target;
    for (var i2 in this._toolbars) this._toolbars[i2] !== e2 && this._toolbars[i2].disable();
  } }), L.Map.mergeOptions({ drawControlTooltips: true, drawControl: false }), L.Map.addInitHook(function() {
    this.options.drawControl && (this.drawControl = new L.Control.Draw(), this.addControl(this.drawControl));
  }), L.Toolbar = L.Class.extend({ initialize: function(t2) {
    L.setOptions(this, t2), this._modes = {}, this._actionButtons = [], this._activeMode = null;
    var e2 = L.version.split(".");
    1 === parseInt(e2[0], 10) && parseInt(e2[1], 10) >= 2 ? L.Toolbar.include(L.Evented.prototype) : L.Toolbar.include(L.Mixin.Events);
  }, enabled: function() {
    return null !== this._activeMode;
  }, disable: function() {
    this.enabled() && this._activeMode.handler.disable();
  }, addToolbar: function(t2) {
    var e2, i2 = L.DomUtil.create("div", "leaflet-draw-section"), o2 = 0, a = this._toolbarClass || "", n = this.getModeHandlers(t2);
    for (this._toolbarContainer = L.DomUtil.create("div", "leaflet-draw-toolbar leaflet-bar"), this._map = t2, e2 = 0; e2 < n.length; e2++) n[e2].enabled && this._initModeHandler(n[e2].handler, this._toolbarContainer, o2++, a, n[e2].title);
    if (o2) return this._lastButtonIndex = --o2, this._actionsContainer = L.DomUtil.create("ul", "leaflet-draw-actions"), i2.appendChild(this._toolbarContainer), i2.appendChild(this._actionsContainer), i2;
  }, removeToolbar: function() {
    for (var t2 in this._modes) this._modes.hasOwnProperty(t2) && (this._disposeButton(this._modes[t2].button, this._modes[t2].handler.enable, this._modes[t2].handler), this._modes[t2].handler.disable(), this._modes[t2].handler.off("enabled", this._handlerActivated, this).off("disabled", this._handlerDeactivated, this));
    this._modes = {};
    for (var e2 = 0, i2 = this._actionButtons.length; e2 < i2; e2++) this._disposeButton(this._actionButtons[e2].button, this._actionButtons[e2].callback, this);
    this._actionButtons = [], this._actionsContainer = null;
  }, _initModeHandler: function(t2, e2, i2, o2, a) {
    var n = t2.type;
    this._modes[n] = {}, this._modes[n].handler = t2, this._modes[n].button = this._createButton({ type: n, title: a, className: o2 + "-" + n, container: e2, callback: this._modes[n].handler.enable, context: this._modes[n].handler }), this._modes[n].buttonIndex = i2, this._modes[n].handler.on("enabled", this._handlerActivated, this).on("disabled", this._handlerDeactivated, this);
  }, _detectIOS: function() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !t.MSStream;
  }, _createButton: function(t2) {
    var e2 = L.DomUtil.create("a", t2.className || "", t2.container), i2 = L.DomUtil.create("span", "sr-only", t2.container);
    e2.href = "#", e2.appendChild(i2), t2.title && (e2.title = t2.title, i2.innerHTML = t2.title), t2.text && (e2.innerHTML = t2.text, i2.innerHTML = t2.text);
    var o2 = this._detectIOS() ? "touchstart" : "click";
    return L.DomEvent.on(e2, "click", L.DomEvent.stopPropagation).on(e2, "mousedown", L.DomEvent.stopPropagation).on(e2, "dblclick", L.DomEvent.stopPropagation).on(e2, "touchstart", L.DomEvent.stopPropagation).on(e2, "click", L.DomEvent.preventDefault).on(e2, o2, t2.callback, t2.context), e2;
  }, _disposeButton: function(t2, e2) {
    var i2 = this._detectIOS() ? "touchstart" : "click";
    L.DomEvent.off(t2, "click", L.DomEvent.stopPropagation).off(t2, "mousedown", L.DomEvent.stopPropagation).off(t2, "dblclick", L.DomEvent.stopPropagation).off(t2, "touchstart", L.DomEvent.stopPropagation).off(t2, "click", L.DomEvent.preventDefault).off(t2, i2, e2);
  }, _handlerActivated: function(t2) {
    this.disable(), this._activeMode = this._modes[t2.handler], L.DomUtil.addClass(this._activeMode.button, "leaflet-draw-toolbar-button-enabled"), this._showActionsToolbar(), this.fire("enable");
  }, _handlerDeactivated: function() {
    this._hideActionsToolbar(), L.DomUtil.removeClass(this._activeMode.button, "leaflet-draw-toolbar-button-enabled"), this._activeMode = null, this.fire("disable");
  }, _createActions: function(t2) {
    var e2, i2, o2, a, n = this._actionsContainer, s = this.getActions(t2), r = s.length;
    for (i2 = 0, o2 = this._actionButtons.length; i2 < o2; i2++) this._disposeButton(this._actionButtons[i2].button, this._actionButtons[i2].callback);
    for (this._actionButtons = []; n.firstChild; ) n.removeChild(n.firstChild);
    for (var l = 0; l < r; l++) "enabled" in s[l] && !s[l].enabled || (e2 = L.DomUtil.create("li", "", n), a = this._createButton({ title: s[l].title, text: s[l].text, container: e2, callback: s[l].callback, context: s[l].context }), this._actionButtons.push({ button: a, callback: s[l].callback }));
  }, _showActionsToolbar: function() {
    var t2 = this._activeMode.buttonIndex, e2 = this._lastButtonIndex, i2 = this._activeMode.button.offsetTop - 1;
    this._createActions(this._activeMode.handler), this._actionsContainer.style.top = i2 + "px", 0 === t2 && (L.DomUtil.addClass(this._toolbarContainer, "leaflet-draw-toolbar-notop"), L.DomUtil.addClass(this._actionsContainer, "leaflet-draw-actions-top")), t2 === e2 && (L.DomUtil.addClass(this._toolbarContainer, "leaflet-draw-toolbar-nobottom"), L.DomUtil.addClass(this._actionsContainer, "leaflet-draw-actions-bottom")), this._actionsContainer.style.display = "block", this._map.fire(L.Draw.Event.TOOLBAROPENED);
  }, _hideActionsToolbar: function() {
    this._actionsContainer.style.display = "none", L.DomUtil.removeClass(this._toolbarContainer, "leaflet-draw-toolbar-notop"), L.DomUtil.removeClass(this._toolbarContainer, "leaflet-draw-toolbar-nobottom"), L.DomUtil.removeClass(this._actionsContainer, "leaflet-draw-actions-top"), L.DomUtil.removeClass(this._actionsContainer, "leaflet-draw-actions-bottom"), this._map.fire(L.Draw.Event.TOOLBARCLOSED);
  } }), L.Draw = L.Draw || {}, L.Draw.Tooltip = L.Class.extend({ initialize: function(t2) {
    this._map = t2, this._popupPane = t2._panes.popupPane, this._visible = false, this._container = t2.options.drawControlTooltips ? L.DomUtil.create("div", "leaflet-draw-tooltip", this._popupPane) : null, this._singleLineLabel = false, this._map.on("mouseout", this._onMouseOut, this);
  }, dispose: function() {
    this._map.off("mouseout", this._onMouseOut, this), this._container && (this._popupPane.removeChild(this._container), this._container = null);
  }, updateContent: function(t2) {
    return this._container ? (t2.subtext = t2.subtext || "", 0 !== t2.subtext.length || this._singleLineLabel ? t2.subtext.length > 0 && this._singleLineLabel && (L.DomUtil.removeClass(this._container, "leaflet-draw-tooltip-single"), this._singleLineLabel = false) : (L.DomUtil.addClass(this._container, "leaflet-draw-tooltip-single"), this._singleLineLabel = true), this._container.innerHTML = (t2.subtext.length > 0 ? '<span class="leaflet-draw-tooltip-subtext">' + t2.subtext + "</span><br />" : "") + "<span>" + t2.text + "</span>", t2.text || t2.subtext ? (this._visible = true, this._container.style.visibility = "inherit") : (this._visible = false, this._container.style.visibility = "hidden"), this) : this;
  }, updatePosition: function(t2) {
    var e2 = this._map.latLngToLayerPoint(t2), i2 = this._container;
    return this._container && (this._visible && (i2.style.visibility = "inherit"), L.DomUtil.setPosition(i2, e2)), this;
  }, showAsError: function() {
    return this._container && L.DomUtil.addClass(this._container, "leaflet-error-draw-tooltip"), this;
  }, removeError: function() {
    return this._container && L.DomUtil.removeClass(this._container, "leaflet-error-draw-tooltip"), this;
  }, _onMouseOut: function() {
    this._container && (this._container.style.visibility = "hidden");
  } }), L.DrawToolbar = L.Toolbar.extend({ statics: { TYPE: "draw" }, options: { polyline: {}, polygon: {}, rectangle: {}, circle: {}, marker: {}, circlemarker: {} }, initialize: function(t2) {
    for (var e2 in this.options) this.options.hasOwnProperty(e2) && t2[e2] && (t2[e2] = L.extend({}, this.options[e2], t2[e2]));
    this._toolbarClass = "leaflet-draw-draw", L.Toolbar.prototype.initialize.call(this, t2);
  }, getModeHandlers: function(t2) {
    return [{ enabled: this.options.polyline, handler: new L.Draw.Polyline(t2, this.options.polyline), title: L.drawLocal.draw.toolbar.buttons.polyline }, { enabled: this.options.polygon, handler: new L.Draw.Polygon(t2, this.options.polygon), title: L.drawLocal.draw.toolbar.buttons.polygon }, { enabled: this.options.rectangle, handler: new L.Draw.Rectangle(t2, this.options.rectangle), title: L.drawLocal.draw.toolbar.buttons.rectangle }, { enabled: this.options.circle, handler: new L.Draw.Circle(t2, this.options.circle), title: L.drawLocal.draw.toolbar.buttons.circle }, { enabled: this.options.marker, handler: new L.Draw.Marker(t2, this.options.marker), title: L.drawLocal.draw.toolbar.buttons.marker }, { enabled: this.options.circlemarker, handler: new L.Draw.CircleMarker(t2, this.options.circlemarker), title: L.drawLocal.draw.toolbar.buttons.circlemarker }];
  }, getActions: function(t2) {
    return [{ enabled: t2.completeShape, title: L.drawLocal.draw.toolbar.finish.title, text: L.drawLocal.draw.toolbar.finish.text, callback: t2.completeShape, context: t2 }, { enabled: t2.deleteLastVertex, title: L.drawLocal.draw.toolbar.undo.title, text: L.drawLocal.draw.toolbar.undo.text, callback: t2.deleteLastVertex, context: t2 }, { title: L.drawLocal.draw.toolbar.actions.title, text: L.drawLocal.draw.toolbar.actions.text, callback: this.disable, context: this }];
  }, setOptions: function(t2) {
    L.setOptions(this, t2);
    for (var e2 in this._modes) this._modes.hasOwnProperty(e2) && t2.hasOwnProperty(e2) && this._modes[e2].handler.setOptions(t2[e2]);
  } }), L.EditToolbar = L.Toolbar.extend({ statics: { TYPE: "edit" }, options: { edit: { selectedPathOptions: { dashArray: "10, 10", fill: true, fillColor: "#fe57a1", fillOpacity: 0.1, maintainColor: false } }, remove: {}, poly: null, featureGroup: null }, initialize: function(t2) {
    t2.edit && (void 0 === t2.edit.selectedPathOptions && (t2.edit.selectedPathOptions = this.options.edit.selectedPathOptions), t2.edit.selectedPathOptions = L.extend({}, this.options.edit.selectedPathOptions, t2.edit.selectedPathOptions)), t2.remove && (t2.remove = L.extend({}, this.options.remove, t2.remove)), t2.poly && (t2.poly = L.extend({}, this.options.poly, t2.poly)), this._toolbarClass = "leaflet-draw-edit", L.Toolbar.prototype.initialize.call(this, t2), this._selectedFeatureCount = 0;
  }, getModeHandlers: function(t2) {
    var e2 = this.options.featureGroup;
    return [{ enabled: this.options.edit, handler: new L.EditToolbar.Edit(t2, { featureGroup: e2, selectedPathOptions: this.options.edit.selectedPathOptions, poly: this.options.poly }), title: L.drawLocal.edit.toolbar.buttons.edit }, { enabled: this.options.remove, handler: new L.EditToolbar.Delete(t2, { featureGroup: e2 }), title: L.drawLocal.edit.toolbar.buttons.remove }];
  }, getActions: function(t2) {
    var e2 = [{ title: L.drawLocal.edit.toolbar.actions.save.title, text: L.drawLocal.edit.toolbar.actions.save.text, callback: this._save, context: this }, { title: L.drawLocal.edit.toolbar.actions.cancel.title, text: L.drawLocal.edit.toolbar.actions.cancel.text, callback: this.disable, context: this }];
    return t2.removeAllLayers && e2.push({ title: L.drawLocal.edit.toolbar.actions.clearAll.title, text: L.drawLocal.edit.toolbar.actions.clearAll.text, callback: this._clearAllLayers, context: this }), e2;
  }, addToolbar: function(t2) {
    var e2 = L.Toolbar.prototype.addToolbar.call(this, t2);
    return this._checkDisabled(), this.options.featureGroup.on("layeradd layerremove", this._checkDisabled, this), e2;
  }, removeToolbar: function() {
    this.options.featureGroup.off("layeradd layerremove", this._checkDisabled, this), L.Toolbar.prototype.removeToolbar.call(this);
  }, disable: function() {
    this.enabled() && (this._activeMode.handler.revertLayers(), L.Toolbar.prototype.disable.call(this));
  }, _save: function() {
    this._activeMode.handler.save(), this._activeMode && this._activeMode.handler.disable();
  }, _clearAllLayers: function() {
    this._activeMode.handler.removeAllLayers(), this._activeMode && this._activeMode.handler.disable();
  }, _checkDisabled: function() {
    var t2, e2 = this.options.featureGroup, i2 = 0 !== e2.getLayers().length;
    this.options.edit && (t2 = this._modes[L.EditToolbar.Edit.TYPE].button, i2 ? L.DomUtil.removeClass(t2, "leaflet-disabled") : L.DomUtil.addClass(t2, "leaflet-disabled"), t2.setAttribute("title", i2 ? L.drawLocal.edit.toolbar.buttons.edit : L.drawLocal.edit.toolbar.buttons.editDisabled)), this.options.remove && (t2 = this._modes[L.EditToolbar.Delete.TYPE].button, i2 ? L.DomUtil.removeClass(t2, "leaflet-disabled") : L.DomUtil.addClass(t2, "leaflet-disabled"), t2.setAttribute("title", i2 ? L.drawLocal.edit.toolbar.buttons.remove : L.drawLocal.edit.toolbar.buttons.removeDisabled));
  } }), L.EditToolbar.Edit = L.Handler.extend({ statics: { TYPE: "edit" }, initialize: function(t2, e2) {
    if (L.Handler.prototype.initialize.call(this, t2), L.setOptions(this, e2), this._featureGroup = e2.featureGroup, !(this._featureGroup instanceof L.FeatureGroup)) throw new Error("options.featureGroup must be a L.FeatureGroup");
    this._uneditedLayerProps = {}, this.type = L.EditToolbar.Edit.TYPE;
    var i2 = L.version.split(".");
    1 === parseInt(i2[0], 10) && parseInt(i2[1], 10) >= 2 ? L.EditToolbar.Edit.include(L.Evented.prototype) : L.EditToolbar.Edit.include(L.Mixin.Events);
  }, enable: function() {
    !this._enabled && this._hasAvailableLayers() && (this.fire("enabled", { handler: this.type }), this._map.fire(L.Draw.Event.EDITSTART, { handler: this.type }), L.Handler.prototype.enable.call(this), this._featureGroup.on("layeradd", this._enableLayerEdit, this).on("layerremove", this._disableLayerEdit, this));
  }, disable: function() {
    this._enabled && (this._featureGroup.off("layeradd", this._enableLayerEdit, this).off("layerremove", this._disableLayerEdit, this), L.Handler.prototype.disable.call(this), this._map.fire(L.Draw.Event.EDITSTOP, { handler: this.type }), this.fire("disabled", { handler: this.type }));
  }, addHooks: function() {
    var t2 = this._map;
    t2 && (t2.getContainer().focus(), this._featureGroup.eachLayer(this._enableLayerEdit, this), this._tooltip = new L.Draw.Tooltip(this._map), this._tooltip.updateContent({ text: L.drawLocal.edit.handlers.edit.tooltip.text, subtext: L.drawLocal.edit.handlers.edit.tooltip.subtext }), t2._editTooltip = this._tooltip, this._updateTooltip(), this._map.on("mousemove", this._onMouseMove, this).on("touchmove", this._onMouseMove, this).on("MSPointerMove", this._onMouseMove, this).on(L.Draw.Event.EDITVERTEX, this._updateTooltip, this));
  }, removeHooks: function() {
    this._map && (this._featureGroup.eachLayer(this._disableLayerEdit, this), this._uneditedLayerProps = {}, this._tooltip.dispose(), this._tooltip = null, this._map.off("mousemove", this._onMouseMove, this).off("touchmove", this._onMouseMove, this).off("MSPointerMove", this._onMouseMove, this).off(L.Draw.Event.EDITVERTEX, this._updateTooltip, this));
  }, revertLayers: function() {
    this._featureGroup.eachLayer(function(t2) {
      this._revertLayer(t2);
    }, this);
  }, save: function() {
    var t2 = new L.LayerGroup();
    this._featureGroup.eachLayer(function(e2) {
      e2.edited && (t2.addLayer(e2), e2.edited = false);
    }), this._map.fire(L.Draw.Event.EDITED, { layers: t2 });
  }, _backupLayer: function(t2) {
    var e2 = L.Util.stamp(t2);
    this._uneditedLayerProps[e2] || (t2 instanceof L.Polyline || t2 instanceof L.Polygon || t2 instanceof L.Rectangle ? this._uneditedLayerProps[e2] = { latlngs: L.LatLngUtil.cloneLatLngs(t2.getLatLngs()) } : t2 instanceof L.Circle ? this._uneditedLayerProps[e2] = { latlng: L.LatLngUtil.cloneLatLng(t2.getLatLng()), radius: t2.getRadius() } : (t2 instanceof L.Marker || t2 instanceof L.CircleMarker) && (this._uneditedLayerProps[e2] = { latlng: L.LatLngUtil.cloneLatLng(t2.getLatLng()) }));
  }, _getTooltipText: function() {
    return { text: L.drawLocal.edit.handlers.edit.tooltip.text, subtext: L.drawLocal.edit.handlers.edit.tooltip.subtext };
  }, _updateTooltip: function() {
    this._tooltip.updateContent(this._getTooltipText());
  }, _revertLayer: function(t2) {
    var e2 = L.Util.stamp(t2);
    t2.edited = false, this._uneditedLayerProps.hasOwnProperty(e2) && (t2 instanceof L.Polyline || t2 instanceof L.Polygon || t2 instanceof L.Rectangle ? t2.setLatLngs(this._uneditedLayerProps[e2].latlngs) : t2 instanceof L.Circle ? (t2.setLatLng(this._uneditedLayerProps[e2].latlng), t2.setRadius(this._uneditedLayerProps[e2].radius)) : (t2 instanceof L.Marker || t2 instanceof L.CircleMarker) && t2.setLatLng(this._uneditedLayerProps[e2].latlng), t2.fire("revert-edited", { layer: t2 }));
  }, _enableLayerEdit: function(t2) {
    var e2, i2, o2 = t2.layer || t2.target || t2;
    this._backupLayer(o2), this.options.poly && (i2 = L.Util.extend({}, this.options.poly), o2.options.poly = i2), this.options.selectedPathOptions && (e2 = L.Util.extend({}, this.options.selectedPathOptions), e2.maintainColor && (e2.color = o2.options.color, e2.fillColor = o2.options.fillColor), o2.options.original = L.extend({}, o2.options), o2.options.editing = e2), o2 instanceof L.Marker ? (o2.editing && o2.editing.enable(), o2.dragging.enable(), o2.on("dragend", this._onMarkerDragEnd).on("touchmove", this._onTouchMove, this).on("MSPointerMove", this._onTouchMove, this).on("touchend", this._onMarkerDragEnd, this).on("MSPointerUp", this._onMarkerDragEnd, this)) : o2.editing.enable();
  }, _disableLayerEdit: function(t2) {
    var e2 = t2.layer || t2.target || t2;
    e2.edited = false, e2.editing && e2.editing.disable(), delete e2.options.editing, delete e2.options.original, this._selectedPathOptions && (e2 instanceof L.Marker ? this._toggleMarkerHighlight(e2) : (e2.setStyle(e2.options.previousOptions), delete e2.options.previousOptions)), e2 instanceof L.Marker ? (e2.dragging.disable(), e2.off("dragend", this._onMarkerDragEnd, this).off("touchmove", this._onTouchMove, this).off("MSPointerMove", this._onTouchMove, this).off("touchend", this._onMarkerDragEnd, this).off("MSPointerUp", this._onMarkerDragEnd, this)) : e2.editing.disable();
  }, _onMouseMove: function(t2) {
    this._tooltip.updatePosition(t2.latlng);
  }, _onMarkerDragEnd: function(t2) {
    var e2 = t2.target;
    e2.edited = true, this._map.fire(L.Draw.Event.EDITMOVE, { layer: e2 });
  }, _onTouchMove: function(t2) {
    var e2 = t2.originalEvent.changedTouches[0], i2 = this._map.mouseEventToLayerPoint(e2), o2 = this._map.layerPointToLatLng(i2);
    t2.target.setLatLng(o2);
  }, _hasAvailableLayers: function() {
    return 0 !== this._featureGroup.getLayers().length;
  } }), L.EditToolbar.Delete = L.Handler.extend({ statics: { TYPE: "remove" }, initialize: function(t2, e2) {
    if (L.Handler.prototype.initialize.call(this, t2), L.Util.setOptions(this, e2), this._deletableLayers = this.options.featureGroup, !(this._deletableLayers instanceof L.FeatureGroup)) throw new Error("options.featureGroup must be a L.FeatureGroup");
    this.type = L.EditToolbar.Delete.TYPE;
    var i2 = L.version.split(".");
    1 === parseInt(i2[0], 10) && parseInt(i2[1], 10) >= 2 ? L.EditToolbar.Delete.include(L.Evented.prototype) : L.EditToolbar.Delete.include(L.Mixin.Events);
  }, enable: function() {
    !this._enabled && this._hasAvailableLayers() && (this.fire("enabled", { handler: this.type }), this._map.fire(L.Draw.Event.DELETESTART, { handler: this.type }), L.Handler.prototype.enable.call(this), this._deletableLayers.on("layeradd", this._enableLayerDelete, this).on("layerremove", this._disableLayerDelete, this));
  }, disable: function() {
    this._enabled && (this._deletableLayers.off("layeradd", this._enableLayerDelete, this).off("layerremove", this._disableLayerDelete, this), L.Handler.prototype.disable.call(this), this._map.fire(L.Draw.Event.DELETESTOP, { handler: this.type }), this.fire("disabled", { handler: this.type }));
  }, addHooks: function() {
    var t2 = this._map;
    t2 && (t2.getContainer().focus(), this._deletableLayers.eachLayer(this._enableLayerDelete, this), this._deletedLayers = new L.LayerGroup(), this._tooltip = new L.Draw.Tooltip(this._map), this._tooltip.updateContent({ text: L.drawLocal.edit.handlers.remove.tooltip.text }), this._map.on("mousemove", this._onMouseMove, this));
  }, removeHooks: function() {
    this._map && (this._deletableLayers.eachLayer(this._disableLayerDelete, this), this._deletedLayers = null, this._tooltip.dispose(), this._tooltip = null, this._map.off("mousemove", this._onMouseMove, this));
  }, revertLayers: function() {
    this._deletedLayers.eachLayer(function(t2) {
      this._deletableLayers.addLayer(t2), t2.fire("revert-deleted", { layer: t2 });
    }, this);
  }, save: function() {
    this._map.fire(L.Draw.Event.DELETED, { layers: this._deletedLayers });
  }, removeAllLayers: function() {
    this._deletableLayers.eachLayer(function(t2) {
      this._removeLayer({ layer: t2 });
    }, this), this.save();
  }, _enableLayerDelete: function(t2) {
    (t2.layer || t2.target || t2).on("click", this._removeLayer, this);
  }, _disableLayerDelete: function(t2) {
    var e2 = t2.layer || t2.target || t2;
    e2.off("click", this._removeLayer, this), this._deletedLayers.removeLayer(e2);
  }, _removeLayer: function(t2) {
    var e2 = t2.layer || t2.target || t2;
    this._deletableLayers.removeLayer(e2), this._deletedLayers.addLayer(e2), e2.fire("deleted");
  }, _onMouseMove: function(t2) {
    this._tooltip.updatePosition(t2.latlng);
  }, _hasAvailableLayers: function() {
    return 0 !== this._deletableLayers.getLayers().length;
  } });
}(window, document);
//# sourceMappingURL=leaflet-draw.js.map
